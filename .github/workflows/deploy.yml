name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      VITE_GRAPHQL_API: ${{ secrets.VITE_GRAPHQL_API }}
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
      VITE_BETTER_AUTH_URL: ${{ secrets.VITE_BETTER_AUTH }}
      VITE_UPLOADS: ${{ secrets.VITE_UPLOADS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Install dependencies
        run: npm ci

      - name: Run tests (lint)
        run: npm run lint

      - name: Run unit tests (if present)
        run: npm run test --if-present

      - name: Build
        run: npm run build

      - name: Publish dist to build branch
        if: ${{ success() }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: build
          publish_dir: ./dist
          enable_jekyll: false
          keep_files: false

  deploy:
    name: Deploy to SSH server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: build
          path: build_branch
          fetch-depth: 0

      - name: Install ssh tools
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: Upload build to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
        run: |
          set -euo pipefail
          if [ -z "${SSH_HOST:-}" ] || [ -z "${SSH_USER:-}" ] || [ -z "${SSH_PASSWORD:-}" ]; then
            echo "Missing required SSH secrets" >&2
            exit 1
          fi
          PORT="${SSH_PORT:-22}"
          DEST_PATH="${PROJECT_PATH:-public_html}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "mkdir -p \"$DEST_PATH\""
          sshpass -p "$SSH_PASSWORD" rsync -az --delete --exclude ".git/" --exclude ".htaccess" -e "ssh -p $PORT -o StrictHostKeyChecking=no" ./build_branch/ "$SSH_USER@$SSH_HOST:$DEST_PATH/"

      # - name: Create .env on server
      #   env:
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USER: ${{ secrets.SSH_USER }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      #     SSH_PORT: ${{ secrets.SSH_PORT }}
      #     PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
      #   run: |
      #     set -euo pipefail
      #     PORT="${SSH_PORT:-22}"
      #     DEST_PATH="${PROJECT_PATH:-public_html}"
      #     sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "cat > \"$DEST_PATH/.env\" << 'EOF'
      #     VITE_GRAPHQL_API=${{ secrets.VITE_GRAPHQL_API }}
      #     VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
      #     VITE_SUPABASE_PUBLISHABLE_KEY=${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
      #     VITE_BETTER_AUTH_URL=${{ secrets.VITE_BETTER_AUTH }}
      #     VITE_UPLOADS=${{ secrets.VITE_UPLOADS }}
      #     EOF"
